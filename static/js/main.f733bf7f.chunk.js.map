{"version":3,"sources":["Navigation.tsx","images/preview_badrpg.jpg","images/preview_carriage.png","images/preview_exercise_gen.png","images/preview_ins_outs.png","images/preview_questodo.jpg","images/preview_rummikub.jpg","images/preview_sudoku.jpg","images/preview_tetris.jpg","images/preview_thirsty.png","images/preview_blogs.png","images/preview_letquiz.png","images/preview_scribe.jpg","images/preview_libe.png","images/preview_plume.png","images/preview_linked.png","images/preview_shef.png","projectLists.ts","ProjectCard.tsx","ProjectCardGrid.tsx","Projects.tsx","Home.tsx","PomodoroTimer.tsx","AdventProjects.tsx","Blog.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Navigation","className","to","currentProjects","name","description","date","image","libePreview","altText","collegeProjects","plumePreview","otherLinks","Map","carriagePreview","repoURL","blogsPreview","letquizPreview","hackathonProjects","thirstyPreview","scribePreview","questodoPreview","shefPreview","linkedPreview","personalProjects","exercisePreview","insAndOutsPreview","hsProjects","badrpgPreview","sudokuPreview","tetrisPreview","rummikubPreview","ProjectCard","Card","alt","src","width","style","maxHeight","objectFit","CardContent","CardActions","Button","href","color","Array","from","keys","map","key","get","ProjectCardGrid","props","title","Grid","container","projects","project","item","xs","sm","md","Projects","id","Home","getDisplayTime","num","PomodoroTimer","useState","workTime","timeLeft","setTimeLeft","roundsFinished","setRoundsFinished","finishTimerCallback","roundJustFinished","roundsBeforeLongBreak","updateRounds","timer","stop","longBreakTime","shortBreakTime","resetTime","useTimer","delay","isRunning","min","Math","floor","sec","onClick","pause","start","i","round","isLong","display","hasLongHolder","isCurrent","getRoundMarker","toString","AdventProjects","Blog","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f733bf7f.chunk.js","sourcesContent":["import { Link } from \"react-router-dom\";\r\nimport \"./Navigation.css\";\r\n\r\nconst Navigation = () => {\r\n  return (\r\n    <nav className=\"navbar\">\r\n      <h1>helen.xu.yang</h1>\r\n      <ul>\r\n        <li>\r\n          <Link to=\"/\">Home</Link>\r\n        </li>\r\n        <li>\r\n          <Link to=\"/blog\">Blog</Link>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navigation;\r\n","export default __webpack_public_path__ + \"static/media/preview_badrpg.953d4749.jpg\";","export default __webpack_public_path__ + \"static/media/preview_carriage.3a2af9f3.png\";","export default __webpack_public_path__ + \"static/media/preview_exercise_gen.3294f8e2.png\";","export default __webpack_public_path__ + \"static/media/preview_ins_outs.9d413d4f.png\";","export default __webpack_public_path__ + \"static/media/preview_questodo.bede874d.jpg\";","export default __webpack_public_path__ + \"static/media/preview_rummikub.45d07ce1.jpg\";","export default __webpack_public_path__ + \"static/media/preview_sudoku.4a69b7c5.jpg\";","export default __webpack_public_path__ + \"static/media/preview_tetris.19729f32.jpg\";","export default __webpack_public_path__ + \"static/media/preview_thirsty.b636842f.png\";","export default __webpack_public_path__ + \"static/media/preview_blogs.eff7590c.png\";","export default __webpack_public_path__ + \"static/media/preview_letquiz.99bb25e0.png\";","export default __webpack_public_path__ + \"static/media/preview_scribe.8e16d17b.jpg\";","export default __webpack_public_path__ + \"static/media/preview_libe.aefaee2f.png\";","export default __webpack_public_path__ + \"static/media/preview_plume.ba45a79d.png\";","export default __webpack_public_path__ + \"static/media/preview_linked.8482d5e2.png\";","export default __webpack_public_path__ + \"static/media/preview_shef.160ed0b0.png\";","import badrpgPreview from './images/preview_badrpg.jpg';\r\nimport carriagePreview from './images/preview_carriage.png';\r\nimport exercisePreview from './images/preview_exercise_gen.png';\r\nimport insAndOutsPreview from './images/preview_ins_outs.png';\r\nimport questodoPreview from './images/preview_questodo.jpg';\r\nimport rummikubPreview from './images/preview_rummikub.jpg';\r\nimport sudokuPreview from './images/preview_sudoku.jpg';\r\nimport tetrisPreview from './images/preview_tetris.jpg';\r\nimport thirstyPreview from './images/preview_thirsty.png';\r\nimport blogsPreview from './images/preview_blogs.png';\r\nimport letquizPreview from './images/preview_letquiz.png';\r\nimport scribePreview from './images/preview_scribe.jpg';\r\nimport libePreview from './images/preview_libe.png';\r\nimport plumePreview from './images/preview_plume.png';\r\nimport linkedPreview from './images/preview_linked.png';\r\nimport shefPreview from './images/preview_shef.png';\r\n\r\nimport { Project } from './types';\r\n\r\nexport const currentProjects: Project[] = [\r\n    {\r\n      name: \"Libe\",\r\n      description: \"A website for Science Olympiad at Cornell tournament management and scoring that I'm developing with a partner. Very much a WIP but we're hoping to see it live by this fall!\",\r\n      date: \"June 2022 - Present\",\r\n      image: libePreview,\r\n      altText: \"Homepage for a tournament showing teams and events\",\r\n    }\r\n  ];\r\n  \r\n  export const collegeProjects: Project[] = [\r\n    {\r\n        name: \"Plume\",\r\n        description: \"Game Design Initiative at Cornell 2022 Showcase Most Innovative Winner: A wholesome 2D platformer where you play as Cupid, shooting arrows to climb and stun enemies to reunite two lovers. I created a level editor using Java Swing, implemented Cupid's animations, and created UI screens including the main menu and level selection screen.\",\r\n        date: \"January 2022 - May 2022\",\r\n        image: plumePreview,\r\n        altText: \"Platformer where Cupid aims an arrow at a sheep enemy\",\r\n        otherLinks: new Map([\r\n            ['Try it out!', 'https://gdiac.cs.cornell.edu/temp/showcase/gallery/plume/']\r\n        ])\r\n    },\r\n    {\r\n      name: \"Carriage\",\r\n      description: \"My project team while I was on the Cornell Design and Tech Initiative! Carrige is a set of Flutter and React mobile/web apps to support CULift, Cornell's paratransit service for students with disabilities. I primarily worked on the rider/driver apps, including testing for and ensuring screenreader accessibility using TalkBack.\",\r\n      date: \"Spring 2020 - August 2021\",\r\n      image: carriagePreview,\r\n      altText: \"A schedule of CULift rides from the Carriage driver app\",\r\n      repoURL: \"https://github.com/cornell-dti/carriage-driver/\",\r\n      otherLinks: new Map([\r\n        ['DTI Project', 'https://www.cornelldti.org/projects/carriage/']\r\n      ])\r\n    },\r\n    {\r\n      name: \"CUBlogs\",\r\n      description: \"Trends in Web Dev partner project: A multi-user blog where users can create, upvote, and filter text posts by author, keywords, and tags\",\r\n      date: \"December 2020\",\r\n      image: blogsPreview,\r\n      altText: \"Main CUBlogs page with posts filtered to posts with the author 'Jeremy'\",\r\n      repoURL: \"https://github.com/triple-jay/trendsfinalproject\",\r\n    },\r\n    {\r\n      name: \"LetQuiz\",\r\n      description: \"Cornell AppDev Hack Challenge, Best App for the Remote Era: A flashcard app created with a partner from Intro to Backend Development, two iOS devs, and a UI/UX designer. I worked on designing and implementing the app's backend featuring authenticated requests and occasionally helped debug our iOS frontend.\",\r\n      date: \"December 2020\",\r\n      image: letquizPreview,\r\n      altText: \"Code from backend routes for getting and deleting a flashcard\",\r\n      repoURL: \"https://github.com/mly32/flashcard-app-hack-challenge\",\r\n    },\r\n  ];\r\n  \r\n  export const hackathonProjects: Project[] = [\r\n    {\r\n      name: \"Thirsty\",\r\n      description: \"Big Red Hacks submission: A Flutter app to help Cornell students locate and rate waterbottle refill stations on campus\",\r\n      date: \"October 2022\",\r\n      image: thirstyPreview,\r\n      altText: \"Map showing water fountain locations with info about the fountain in Caldwell Hall\",\r\n      otherLinks: new Map([\r\n        ['DevPost', 'https://devpost.com/software/thirsty-xifz3h']\r\n      ])\r\n    },\r\n    {\r\n        name: \"Scribe\",\r\n        description: \"TechTogether Seattle submission: A web app that connects users with visual/hearing impairments to Microsoft Azure AI or sighted/hearing volunteers for describing or transcribing images, audio, and videos\",\r\n        date: \"January 2021\",\r\n        image: scribePreview,\r\n        altText: \"Main page showing posts and buttons to create a post, analyze an image with AI, or transcribe a video\",\r\n        repoURL: \"https://github.com/helenxuyang/tts_2021\"\r\n    },\r\n    {\r\n      name: \"quesTodo\",\r\n      description: \"Technica 2020, Best Product IoT Hack 2nd Place Winner: A React app that turns your to do list into boss battle quests.\",\r\n      date: \"October 2020\",\r\n      image: questodoPreview,\r\n      altText: \"List of quests including 'Math HW' and 'Clean my room' with corresponding difficulties and book-shaped boss avatars\",\r\n      repoURL: \"https://github.com/helenxuyang/technica_2020\",\r\n      otherLinks: new Map([\r\n        ['DevPost', 'https://devpost.com/software/questodo'],\r\n      ])\r\n    },\r\n    {\r\n      name: \"shef\",\r\n      description: \"DTI Hackathon 2020, Peoples' Choice Winner: A Flutter app for helping college students find recipes based on the ingredients and utensils they have with a fun Tinder-style interface\",\r\n      date: \"September 2020\",\r\n      image: shefPreview,\r\n      altText: \"Tinder-style card for a quesadilla recipe\",\r\n      repoURL: \"https://github.com/helenxuyang/dti_hackathon_2020\",\r\n    },\r\n    {\r\n      name: \"Linked\",\r\n      description: \"Hack Our Campus 2020, Mental Health Category Winner: A Flutter app for creating virtual hangouts with automatically generated Google Meet calls to help students stay connected more easily during the remote semester\",\r\n      date: \"August 2020\",\r\n      image: linkedPreview,\r\n      altText: \"Profile, Schedule, Discover, and Event pages from Linked\",\r\n      repoURL: \"https://github.com/helenxuyang/linked\",\r\n    },\r\n  ];\r\n  \r\n  export const personalProjects: Project[] = [\r\n    {\r\n      name: \"Exercise Generator\",\r\n      description: \"A Flutter app that generates a random workout from a list of exercises, made in hopes of forcing myself to exercise more (spoiler: it didn't work)\",\r\n      date: \"Summer 2020\",\r\n      image: exercisePreview,\r\n      altText: \"'Ready to work out today?' header with a button that says Grind NEVER stops with copious amounts of emojis\",\r\n      repoURL: \"https://github.com/helenxuyang/exercise_generator\",\r\n    },\r\n    {\r\n      name: \"Ins & Outs\",\r\n      description: \"A Flutter app for tracking food and symptoms to help with identifying possible food intolerances. Unfinished, but I hope to continue working on it!\",\r\n      date: \"Summer 2020\",\r\n      image: insAndOutsPreview,\r\n      altText: \"Card showing a lunch of watermelon, ramen, and green beans\",\r\n      repoURL: \"https://github.com/helenxuyang/ins-and-outs\",\r\n    }\r\n  ]\r\n  \r\n  export const hsProjects: Project[] = [\r\n    {\r\n      name: \"BadRPG\",\r\n      description: \"AOOD partner project: an RPG full of puns with a self-aware name and my questionable pixel art\",\r\n      date: \"Spring 2019\",\r\n      image: badrpgPreview,\r\n      altText: \"A character standing in front of two houses\",\r\n      repoURL: \"https://github.com/helenxuyang/BadRPG/\",\r\n    },\r\n    {\r\n      name: \"Sudoku\",\r\n      description: \"AOOD group project: a Sudoku game made for our teacher, who was our client as I lead a team of 7 students to walk through the professional software development process\",\r\n      date: \"Winter-Spring 2019\",\r\n      image: sudokuPreview,\r\n      altText: \"Sudoku game interface\",\r\n      repoURL: \"https://github.com/helenxuyang/Sudoku\",\r\n    },\r\n    {\r\n      name: \"Tetris\",\r\n      description: \"CSA partner project: a Tetris game with single-player sprint/marathon and 2-player race/battle modes\",\r\n      date: \"Spring 2018\",\r\n      image: tetrisPreview,\r\n      altText: \"Two Tetris screens side by side\",\r\n      repoURL: \"https://github.com/helenxuyang/Tetris\",\r\n    },\r\n    {\r\n      name: \"Rummikub\",\r\n      description: \"CSA picture project: a recreation of the board game Rummikub, created from a base project with mouse click position and image display features\",\r\n      date: \"Fall-Winter 2018\",\r\n      image: rummikubPreview,\r\n      altText: \"A grid with number tiles\",\r\n      repoURL: \"https://github.com/helenxuyang/Rummikub\",\r\n    },\r\n  ];\r\n  ","import { Button, Card, CardActions, CardContent } from \"@material-ui/core\"\r\nimport './ProjectCard.css';\r\nimport { Project } from './types';\r\n\r\nconst ProjectCard = ({ name, date, description, image, altText, repoURL, otherLinks }: Project) => {\r\n  return <Card className=\"project-card\">\r\n      <img alt={altText} src={image} width='100%' style={{ maxHeight: '300px', objectFit: 'contain' }}></img>\r\n    <CardContent>\r\n      <h4>{name}</h4>\r\n      <i>{date}</i>\r\n      <p>{description}</p>\r\n    </CardContent>\r\n    <CardActions>\r\n      {repoURL && <Button href={repoURL} style={{ color: 'darkslateblue' }}>\r\n        GitHub\r\n      </Button>}\r\n      {otherLinks && Array.from(otherLinks?.keys()).map((key) =>\r\n        <Button href={otherLinks?.get(key)} style={{ color: 'darkslateblue' }} >\r\n          {key}\r\n        </Button>)}\r\n    </CardActions>\r\n  </Card>\r\n}\r\n\r\nexport default ProjectCard;\r\n","import ProjectCard from \"./ProjectCard\";\r\nimport { Project } from \"./types\";\r\nimport \"./ProjectCard\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport \"./ProjectCardGrid.css\";\r\n\r\ntype ProjectCardGridProps = {\r\n  title: string;\r\n  projects: Project[];\r\n};\r\nconst ProjectCardGrid = (props: ProjectCardGridProps) => {\r\n  return (\r\n    <div>\r\n      <h3>{props.title}</h3>\r\n      <Grid container>\r\n        {props.projects.map((project) => (\r\n          <Grid item xs={12} sm={6} md={4}>\r\n            <ProjectCard {...project} />\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProjectCardGrid;\r\n","import {\r\n  currentProjects,\r\n  collegeProjects,\r\n  hackathonProjects,\r\n  personalProjects,\r\n  hsProjects,\r\n} from \"./projectLists\";\r\nimport ProjectCardGrid from \"./ProjectCardGrid\";\r\nimport React from \"react\";\r\n\r\nconst Projects = () => {\r\n  return (\r\n    <div id=\"projects\" className=\"home-section\">\r\n      <ProjectCardGrid title=\"Current Projects\" projects={currentProjects} />\r\n      <ProjectCardGrid title=\"School Projects\" projects={collegeProjects} />\r\n      <ProjectCardGrid\r\n        title=\"Hackathon Projects\"\r\n        projects={hackathonProjects}\r\n      />\r\n      <ProjectCardGrid title=\"Personal Projects\" projects={personalProjects} />\r\n      <ProjectCardGrid title=\"High School Projects\" projects={hsProjects} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Projects;\r\n","import \"./Home.css\";\r\nimport Projects from \"./Projects\";\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div id=\"home\">\r\n      <div id=\"home-intro\" className=\"home-section\">\r\n        <div id=\"home-intro-text\">\r\n          <p className=\"intro-title\">Hi, I'm Helen!</p>\r\n          <p>\r\n            I'm a CS student at Cornell University ('23). I primarily have\r\n            experience with frontend web/mobile development with React and\r\n            Flutter. I'm interested in creating useful, fun, and accessible\r\n            tech!\r\n          </p>\r\n          <p>\r\n            Outside of work, I enjoy learning American Sign Language, cooking,\r\n            and being terrible at video games.\r\n          </p>\r\n          <a href=\"https://www.linkedin.com/in/helenxuyang/\">LinkedIn</a>\r\n          {\" | \"}\r\n          <a href=\"https://github.com/helenxuyang\">GitHub</a>\r\n        </div>\r\n      </div>\r\n      <Projects />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React, { useState } from \"react\";\r\nimport { useTimer } from \"react-use-precision-timer\";\r\nimport \"./PomodoroTimer.css\";\r\n\r\nconst getDisplayTime = (num: number) => {\r\n  if (num < 10) {\r\n    return `0${num}`;\r\n  }\r\n  return num;\r\n};\r\n\r\nconst PomodoroTimer = () => {\r\n  const workTime = 25;\r\n  const shortBreakTime = 5;\r\n  const longBreakTime = 25;\r\n  const roundsBeforeLongBreak = 7;\r\n\r\n  const [timeLeft, setTimeLeft] = useState(workTime * 60);\r\n  const [roundsFinished, setRoundsFinished] = useState(0);\r\n\r\n  const updateRounds = (roundJustFinished: number) => {\r\n    if (roundJustFinished === roundsBeforeLongBreak + 1) {\r\n      setRoundsFinished(0);\r\n    } else {\r\n      setRoundsFinished((roundsFinished) => roundsFinished + 1);\r\n    }\r\n  };\r\n\r\n  const resetTime = (roundJustFinished: number) => {\r\n    if (roundJustFinished === roundsBeforeLongBreak) {\r\n      setTimeLeft(longBreakTime * 60);\r\n    } else {\r\n      setTimeLeft(\r\n        roundJustFinished % 2 === 0 ? workTime * 60 : shortBreakTime * 60\r\n      );\r\n    }\r\n  };\r\n\r\n  const finishTimerCallback = () => {\r\n    const roundJustFinished = roundsFinished + 1;\r\n    updateRounds(roundJustFinished);\r\n    timer.stop();\r\n    resetTime(roundJustFinished);\r\n  };\r\n\r\n  const timerCallback = () => {\r\n    if (timer.isRunning()) {\r\n      if (timeLeft === 0) {\r\n        finishTimerCallback();\r\n      } else {\r\n        setTimeLeft((timeLeft) => timeLeft - 1);\r\n      }\r\n    }\r\n  };\r\n  const timer = useTimer({ delay: 1000 }, timerCallback);\r\n\r\n  const startOrPause = () => {\r\n    if (timer.isRunning()) {\r\n      timer.pause();\r\n    } else {\r\n      timer.start();\r\n    }\r\n  };\r\n\r\n  const skip = () => {\r\n    finishTimerCallback();\r\n  };\r\n\r\n  const min = Math.floor(timeLeft / 60);\r\n  const sec = timeLeft % 60;\r\n\r\n  const getRoundMarker = (\r\n    round: number,\r\n    display: string,\r\n    hasLongHolder: boolean\r\n  ) => {\r\n    const isCurrent = round === roundsFinished + 1;\r\n    return (\r\n      <div className={\"round-marker\"}>\r\n        <div\r\n          className={\r\n            \"round-marker-holder\" + (hasLongHolder ? \" long-holder\" : \"\")\r\n          }\r\n        />\r\n        <div\r\n          className={\"round-marker-circle\" + (isCurrent ? \" current\" : \"\")}\r\n          key={round}\r\n        >\r\n          {display}\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div id=\"timer\">\r\n        <p id=\"timer-text\">\r\n          {roundsFinished % 2 === 0 ? \"Work hard!\" : \"Relax :)\"}\r\n        </p>\r\n        <p id=\"time\">\r\n          {getDisplayTime(min)}:{getDisplayTime(sec)}{\" \"}\r\n        </p>\r\n        <div>\r\n          <button className=\"timer-button uppercase\" onClick={startOrPause}>\r\n            {timer.isRunning() ? \"Pause\" : \"Start\"}\r\n          </button>\r\n          <button className=\"timer-button uppercase\" onClick={skip}>\r\n            Skip\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div className=\"round-marker-row\">\r\n        {[...Array(roundsBeforeLongBreak + 1).keys()].map((i) => {\r\n          const round = i + 1;\r\n          const isLong = i % 2 === 0;\r\n          let display = \"\";\r\n          if (i === roundsBeforeLongBreak) {\r\n            display = longBreakTime.toString();\r\n          } else if (round <= roundsFinished) {\r\n            display = \"✔\";\r\n          } else if (isLong) {\r\n            display = workTime.toString();\r\n          } else {\r\n            display = shortBreakTime.toString();\r\n          }\r\n          return getRoundMarker(round, display, isLong);\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PomodoroTimer;\r\n","import \"./AdventProjects.css\";\r\nimport PomodoroTimer from \"./PomodoroTimer\";\r\n\r\nfunction AdventProjects() {\r\n  return (\r\n    <div id=\"advent-projects\">\r\n      <h2>Winter Break React Practice</h2>\r\n      <p>December 2022</p>\r\n      <p>\r\n        I wanted to get some practice with React over winter break, so here's\r\n        some mini projects inspired by the{\" \"}\r\n        <a href=\"https://www.adventofjs.com/\">Advent of JS</a>!\r\n      </p>\r\n      <h3>Pomodoro Timer</h3>\r\n      <PomodoroTimer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AdventProjects;\r\n","import \"./Blog.css\";\r\nimport AdventProjects from \"./AdventProjects\";\r\n\r\nconst Blog = () => {\r\n  return (\r\n    <div id=\"blog\">\r\n      WIP; I'll be posting some random projects and thoughts here!\r\n      <div className=\"blog-card\">\r\n        <AdventProjects />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Blog;\r\n","import \"./App.css\";\r\nimport Navigation from \"./Navigation\";\r\nimport { Switch, Route, BrowserRouter as Router } from \"react-router-dom\";\r\nimport Home from \"./Home\";\r\nimport Blog from \"./Blog\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Router>\r\n        <Navigation />\r\n        <Switch>\r\n          <Route path=\"/blog\">\r\n            <Blog />\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <Home />\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}